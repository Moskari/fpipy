#!/usr/bin/env python

import sys
import os
import argparse
try:
    from tqdm import tqdm
except ImportError:
    tqdm = None

import fpipy as fp


def save_nc(ds, path):
    """Save dataset as netCDF, overwriting"""
    name, _ = os.path.splitext(path)
    ds.to_netcdf(name + '.nc', mode='w')


def writable_dir(dirname):
    """Check if the given directory is valid and open for writing."""
    if not os.path.isdir(dirname):
        raise argparse.ArgumentTypeError(
                '{0} is not a valid path'.format(dirname))
    if os.access(dirname, os.W_OK):
        return dirname
    else:
        raise argparse.ArgumentError(
                '{0} is not writable.'.format(dirname))


def readable_cfa(fname):
    """Check if a given filename points to readable CFA data."""

    bname, ext = os.path.splitext(fname)
    envifiles = [bname + e for e in ('.dat', '.hdt', '.hdr')]
    if (not all(os.path.isfile(f) for f in envifiles)
            and not os.path.isfile(bname + '.nc')):
                raise argparse.ArgumentTypeError(
                         '{0} is not a valid CFA file'.format(fname))
    else:
        return fname


out_formats = {
    'netCDF': save_nc,
            }


default_format = 'netCDF'
default_prefix = '_RAD'
default_dir = '.'

parser = argparse.ArgumentParser(
        description='Convert raw CFA data to radiances.')
parser.add_argument(
        '-f', '--format',
        metavar='output_format',
        default=default_format,
        choices=out_formats.keys(),
        help=('Output file format for the processed radiances, '
              'default "{0}"'.format(default_format)))
parser.add_argument(
        '-o', '--odir',
        default=default_dir,
        metavar='output_dir',
        type=writable_dir,
        help=('Directory to write output files to, '
              'default "{0}"'.format(default_dir)))
parser.add_argument(
        '-p', '--prefix',
        default=default_prefix,
        metavar='output_prefix',
        type=str,
        help=('Filename prefix to add to output filenames, '
              'default "{0}"'.format(default_prefix)))
parser.add_argument(
        'inputs',
        metavar='input file',
        nargs='+',
        type=readable_cfa,
        help=('List of files to process to radiance.'))


def main(argv):
    args = parser.parse_args(argv)

    savecmd = out_formats[args.format]
    outdir = args.odir
    inputs = args.inputs
    prefix = args.prefix

    print('Calculating radiances from {0} files...'.format(len(inputs)))
    if tqdm:
        inputs = tqdm(inputs)

    for rawfile in inputs:
        rad = fp.raw_to_radiance(fp.read_cfa(rawfile))
        bname = os.path.basename(rawfile)
        savecmd(rad, os.path.join(outdir, prefix + bname))


if __name__ == "__main__":
    main(sys.argv[1:])
